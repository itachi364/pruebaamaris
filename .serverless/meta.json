{
  "C:\\Users\\NarutoRgal\\Documents\\workspace-spring-tool-suite-4-4.5.1.RELEASE\\pruebaamaris\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "C:\\Users\\NarutoRgal\\Documents\\workspace-spring-tool-suite-4-4.5.1.RELEASE\\pruebaamaris\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "pruebaamaris",
      "frameworkVersion": "4",
      "provider": {
        "name": "aws",
        "runtime": "java17",
        "region": "us-east-1",
        "memorySize": 1024,
        "timeout": 30,
        "environment": {
          "SKIP_INIT": "false",
          "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:Scan",
                  "dynamodb:Query"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-east-1:293210010085:table/Funds",
                  "arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance",
                  "arn:aws:dynamodb:us-east-1:293210010085:table/Transactions"
                ]
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/pruebaamaris-dev-api"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "pruebaamaris",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:Scan",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:293210010085:table/Funds",
                            "arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance",
                            "arn:aws:dynamodb:us-east-1:293210010085:table/Transactions"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "pruebaamaris",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
                  "S3Key": "serverless/pruebaamaris/dev/1752520787266-2025-07-14T19:19:47.266Z/pruebaamaris-lambda.jar"
                },
                "Handler": "com.msvanegasg.pruebaamaris.StreamLambdaHandler",
                "Runtime": "java17",
                "FunctionName": "pruebaamaris-dev-api",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "SKIP_INIT": "false",
                    "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "CWaSFfHWvNLhbVg/CFoS3R+VQjw0AmEoqesZSSXyef0="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-pruebaamaris",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1752520781216": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodProxyVarAny"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "FundsTable": {
              "Condition": "CreateTablesCondition",
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Funds",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "fundId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "fundId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "UserBalanceTable": {
              "Condition": "CreateTablesCondition",
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "UserBalance",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "balanceId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "balanceId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "userId-index",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "TransactionsTable": {
              "Condition": "CreateTablesCondition",
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Transactions",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "transactionId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "transactionId",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "userId-index",
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
              "Export": {
                "Name": "sls-pruebaamaris-dev-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI"
              },
              "Export": {
                "Name": "sls-pruebaamaris-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-pruebaamaris-dev-ServiceEndpoint"
              }
            },
            "FundsTableName": {
              "Description": "Nombre de la tabla de fondos",
              "Value": {
                "Ref": "FundsTable"
              },
              "Condition": "CreateTablesCondition"
            },
            "UserBalanceTableName": {
              "Description": "Nombre de la tabla de balance del usuario",
              "Value": {
                "Ref": "UserBalanceTable"
              },
              "Condition": "CreateTablesCondition"
            },
            "TransactionsTableName": {
              "Description": "Nombre de la tabla de transacciones",
              "Value": {
                "Ref": "TransactionsTable"
              },
              "Condition": "CreateTablesCondition"
            }
          },
          "Parameters": {
            "CreateTables": {
              "Type": "String",
              "Default": "true",
              "AllowedValues": [
                "true",
                "false"
              ]
            }
          },
          "Conditions": {
            "CreateTablesCondition": {
              "Fn::Equals": [
                {
                  "Ref": "CreateTables"
                },
                "true"
              ]
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "artifact": "target/pruebaamaris-lambda.jar",
        "artifactsS3KeyDirname": "serverless/pruebaamaris/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
        "artifactDirectoryName": "serverless/pruebaamaris/dev/1752520787266-2025-07-14T19:19:47.266Z"
      },
      "functions": {
        "api": {
          "handler": "com.msvanegasg.pruebaamaris.StreamLambdaHandler",
          "events": [
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "pruebaamaris-dev-api",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "java17",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI"
        }
      },
      "params": {
        "default": {
          "createTables": true
        }
      },
      "custom": {
        "createTables": "false"
      },
      "resources": {
        "Parameters": {
          "CreateTables": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
              "true",
              "false"
            ]
          }
        },
        "Conditions": {
          "CreateTablesCondition": {
            "Fn::Equals": [
              {
                "Ref": "CreateTables"
              },
              "true"
            ]
          }
        },
        "Resources": {
          "FundsTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Funds",
              "AttributeDefinitions": [
                {
                  "AttributeName": "fundId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "fundId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UserBalanceTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "UserBalance",
              "AttributeDefinitions": [
                {
                  "AttributeName": "balanceId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "balanceId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TransactionsTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Transactions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "transactionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "transactionId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "FundsTableName": {
            "Description": "Nombre de la tabla de fondos",
            "Value": {
              "Ref": "FundsTable"
            },
            "Condition": "CreateTablesCondition"
          },
          "UserBalanceTableName": {
            "Description": "Nombre de la tabla de balance del usuario",
            "Value": {
              "Ref": "UserBalanceTable"
            },
            "Condition": "CreateTablesCondition"
          },
          "TransactionsTableName": {
            "Description": "Nombre de la tabla de transacciones",
            "Value": {
              "Ref": "TransactionsTable"
            },
            "Condition": "CreateTablesCondition"
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "java17",
      "region": "us-east-1",
      "memorySize": 1024,
      "timeout": 30,
      "environment": {
        "SKIP_INIT": "false",
        "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:Scan",
                "dynamodb:Query"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:293210010085:table/Funds",
                "arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance",
                "arn:aws:dynamodb:us-east-1:293210010085:table/Transactions"
              ]
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pruebaamaris-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "pruebaamaris",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:Scan",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:293210010085:table/Funds",
                          "arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance",
                          "arn:aws:dynamodb:us-east-1:293210010085:table/Transactions"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "pruebaamaris",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
                "S3Key": "serverless/pruebaamaris/dev/1752520787266-2025-07-14T19:19:47.266Z/pruebaamaris-lambda.jar"
              },
              "Handler": "com.msvanegasg.pruebaamaris.StreamLambdaHandler",
              "Runtime": "java17",
              "FunctionName": "pruebaamaris-dev-api",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "SKIP_INIT": "false",
                  "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "CWaSFfHWvNLhbVg/CFoS3R+VQjw0AmEoqesZSSXyef0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-pruebaamaris",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1752520781216": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FundsTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Funds",
              "AttributeDefinitions": [
                {
                  "AttributeName": "fundId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "fundId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UserBalanceTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "UserBalance",
              "AttributeDefinitions": [
                {
                  "AttributeName": "balanceId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "balanceId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TransactionsTable": {
            "Condition": "CreateTablesCondition",
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Transactions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "transactionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "transactionId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
            "Export": {
              "Name": "sls-pruebaamaris-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI"
            },
            "Export": {
              "Name": "sls-pruebaamaris-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-pruebaamaris-dev-ServiceEndpoint"
            }
          },
          "FundsTableName": {
            "Description": "Nombre de la tabla de fondos",
            "Value": {
              "Ref": "FundsTable"
            },
            "Condition": "CreateTablesCondition"
          },
          "UserBalanceTableName": {
            "Description": "Nombre de la tabla de balance del usuario",
            "Value": {
              "Ref": "UserBalanceTable"
            },
            "Condition": "CreateTablesCondition"
          },
          "TransactionsTableName": {
            "Description": "Nombre de la tabla de transacciones",
            "Value": {
              "Ref": "TransactionsTable"
            },
            "Condition": "CreateTablesCondition"
          }
        },
        "Parameters": {
          "CreateTables": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
              "true",
              "false"
            ]
          }
        },
        "Conditions": {
          "CreateTablesCondition": {
            "Fn::Equals": [
              {
                "Ref": "CreateTables"
              },
              "true"
            ]
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: pruebaamaris\r\nframeworkVersion: '4'\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: java17\r\n  region: us-east-1\r\n  memorySize: 1024\r\n  timeout: 30\r\n  environment:\r\n    SKIP_INIT: \"false\"\r\n    JAVA_TOOL_OPTIONS: \"-XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: Allow\r\n          Action:\r\n            - dynamodb:GetItem\r\n            - dynamodb:PutItem\r\n            - dynamodb:UpdateItem\r\n            - dynamodb:Scan\r\n            - dynamodb:Query\r\n          Resource:\r\n            - arn:aws:dynamodb:us-east-1:293210010085:table/Funds\r\n            - arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance\r\n            - arn:aws:dynamodb:us-east-1:293210010085:table/Transactions\r\n\r\npackage:\r\n  artifact: target/pruebaamaris-lambda.jar\r\n\r\nfunctions:\r\n  api:\r\n    handler: com.msvanegasg.pruebaamaris.StreamLambdaHandler\r\n    events:\r\n      - http:\r\n          path: /{proxy+}\r\n          method: ANY\r\n\r\nparams:\r\n  default:\r\n    createTables: true\r\n\r\ncustom:\r\n  createTables: ${param:createTables}\r\n\r\nresources:\r\n  Parameters:\r\n    CreateTables:\r\n      Type: String\r\n      Default: \"true\"\r\n      AllowedValues:\r\n        - \"true\"\r\n        - \"false\"\r\n\r\n  Conditions:\r\n    CreateTablesCondition: !Equals [ !Ref CreateTables, \"true\" ]\r\n\r\n  Resources:\r\n    FundsTable:\r\n      Condition: CreateTablesCondition\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Funds\r\n        AttributeDefinitions:\r\n          - AttributeName: fundId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: fundId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    UserBalanceTable:\r\n      Condition: CreateTablesCondition\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: UserBalance\r\n        AttributeDefinitions:\r\n          - AttributeName: balanceId\r\n            AttributeType: S\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: balanceId\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: userId-index\r\n            KeySchema:\r\n              - AttributeName: userId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    TransactionsTable:\r\n      Condition: CreateTablesCondition\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Transactions\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: transactionId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: transactionId\r\n            KeyType: RANGE\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: userId-index\r\n            KeySchema:\r\n              - AttributeName: userId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n  Outputs:\r\n    FundsTableName:\r\n      Description: Nombre de la tabla de fondos\r\n      Value:\r\n        Ref: FundsTable\r\n      Condition: CreateTablesCondition\r\n\r\n    UserBalanceTableName:\r\n      Description: Nombre de la tabla de balance del usuario\r\n      Value:\r\n        Ref: UserBalanceTable\r\n      Condition: CreateTablesCondition\r\n\r\n    TransactionsTableName:\r\n      Description: Nombre de la tabla de transacciones\r\n      Value:\r\n        Ref: TransactionsTable\r\n      Condition: CreateTablesCondition\r\n",
    "command": [
      "deploy"
    ],
    "options": {
      "aws-profile": "spring-serverless",
      "param": [
        "createTables=false"
      ]
    },
    "orgId": "96869ddb-b7c6-499e-9ebe-3661a2d181cd",
    "orgName": "michaelvanegas",
    "userId": "ww24d6VFBhr6jGjjr6",
    "userName": "michaelvanegas",
    "serviceProviderAwsAccountId": "293210010085",
    "serviceProviderAwsCfStackName": "pruebaamaris-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:293210010085:stack/pruebaamaris-dev/7dd032c0-60bc-11f0-9e0a-0e2583be70af",
    "serviceProviderAwsCfStackCreated": "2025-07-14T14:11:53.067Z",
    "serviceProviderAwsCfStackUpdated": "2025-07-14T19:16:52.992Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "FundsTableName",
        "OutputValue": "Funds",
        "Description": "Nombre de la tabla de fondos"
      },
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:293210010085:function:pruebaamaris-dev-api:25",
        "Description": "Current Lambda function version",
        "ExportName": "sls-pruebaamaris-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TransactionsTableName",
        "OutputValue": "Transactions",
        "Description": "Nombre de la tabla de transacciones"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://a2hfg1f856.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-pruebaamaris-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "UserBalanceTableName",
        "OutputValue": "UserBalance",
        "Description": "Nombre de la tabla de balance del usuario"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
        "ExportName": "sls-pruebaamaris-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/pruebaamaris-dev-api"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "pruebaamaris",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pruebaamaris-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:Scan",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:293210010085:table/Funds",
                        "arn:aws:dynamodb:us-east-1:293210010085:table/UserBalance",
                        "arn:aws:dynamodb:us-east-1:293210010085:table/Transactions"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "pruebaamaris",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
              "S3Key": "serverless/pruebaamaris/dev/1752520787266-2025-07-14T19:19:47.266Z/pruebaamaris-lambda.jar"
            },
            "Handler": "com.msvanegasg.pruebaamaris.StreamLambdaHandler",
            "Runtime": "java17",
            "FunctionName": "pruebaamaris-dev-api",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "SKIP_INIT": "false",
                "JAVA_TOOL_OPTIONS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApiLogGroup"
          ]
        },
        "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "CodeSha256": "CWaSFfHWvNLhbVg/CFoS3R+VQjw0AmEoqesZSSXyef0="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-pruebaamaris",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceProxyVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "{proxy+}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProxyVarAny": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "ANY",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProxyVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ApiLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1752520781216": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodProxyVarAny"
          ]
        },
        "ApiLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "FundsTable": {
          "Condition": "CreateTablesCondition",
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Funds",
            "AttributeDefinitions": [
              {
                "AttributeName": "fundId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "fundId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "UserBalanceTable": {
          "Condition": "CreateTablesCondition",
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "UserBalance",
            "AttributeDefinitions": [
              {
                "AttributeName": "balanceId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "balanceId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "userId-index",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TransactionsTable": {
          "Condition": "CreateTablesCondition",
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Transactions",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "transactionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "transactionId",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "userId-index",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-ce2f9573-aed3",
          "Export": {
            "Name": "sls-pruebaamaris-dev-ServerlessDeploymentBucketName"
          }
        },
        "ApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApiLambdaVersionM0sFRuTP62hQq9j8p0ju5Mw9eHjIrm2y4TKvjnzZvI"
          },
          "Export": {
            "Name": "sls-pruebaamaris-dev-ApiLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-pruebaamaris-dev-ServiceEndpoint"
          }
        },
        "FundsTableName": {
          "Description": "Nombre de la tabla de fondos",
          "Value": {
            "Ref": "FundsTable"
          },
          "Condition": "CreateTablesCondition"
        },
        "UserBalanceTableName": {
          "Description": "Nombre de la tabla de balance del usuario",
          "Value": {
            "Ref": "UserBalanceTable"
          },
          "Condition": "CreateTablesCondition"
        },
        "TransactionsTableName": {
          "Description": "Nombre de la tabla de transacciones",
          "Value": {
            "Ref": "TransactionsTable"
          },
          "Condition": "CreateTablesCondition"
        }
      },
      "Parameters": {
        "CreateTables": {
          "Type": "String",
          "Default": "true",
          "AllowedValues": [
            "true",
            "false"
          ]
        }
      },
      "Conditions": {
        "CreateTablesCondition": {
          "Fn::Equals": [
            {
              "Ref": "CreateTables"
            },
            "true"
          ]
        }
      }
    }
  }
}